name: CI/CD Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run smoke tests
      run: |
        IMAGE=$(echo "${{ steps.meta.outputs.tags }}" | head -n1 | tr -d '[:space:]')
        echo "Testing image: $IMAGE"
        docker run --rm -d --name ontoseed-test -p 3001:3000 "$IMAGE"
        sleep 20
        
        # POST minimal Turtle payload to /api/validate
        cat <<EOF | curl -f -X POST -H "Content-Type: text/turtle" --data-binary @- http://localhost:3001/api/validate || (docker logs ontoseed-test && exit 1)
        @prefix ex: <http://example.org/> .
        ex:test ex:hasProperty ex:value .
        EOF
        
        docker stop ontoseed-test
        
    outputs:
      image: ${{ env.REGISTRY }}/savas-us/aletheion-ontoseed:sha-${{ github.sha }}
      
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
      
    - name: Deploy to Fly.io
      run: |
        flyctl deploy --remote-only --image ${{ needs.build.outputs.image }}
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        
    - name: Get deployment URL
      id: deploy-url
      run: |
        APP_URL=$(flyctl info --json | jq -r '.Hostname')
        echo "url=https://$APP_URL" >> $GITHUB_OUTPUT
        
    - name: Add deployment summary
      run: |
        echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ needs.build.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Preview URL**: ${{ steps.deploy-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **SHACL Playground**: ${{ steps.deploy-url.outputs.url }}/playground" >> $GITHUB_STEP_SUMMARY
        echo "- **SemCom Playground**: ${{ steps.deploy-url.outputs.url }}/semcom" >> $GITHUB_STEP_SUMMARY
        echo "- **Provenance Ledger**: ${{ steps.deploy-url.outputs.url }}/provenance" >> $GITHUB_STEP_SUMMARY